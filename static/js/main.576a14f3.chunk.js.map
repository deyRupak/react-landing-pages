{"version":3,"sources":["logo.svg","static/images/cards/test.png","components/HomeGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","width","backgroundColor","media","height","paddingTop","avatar","HomeGrid","classes","Card","className","CardHeader","Avatar","aria-label","title","subheader","CardMedia","CardContent","CardActions","disableSpacing","IconButton","style","color","App","src","logo","alt","Grid","container","justify","spacing","display","maxWidth","map","value","key","item","marginTop","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,iGCA3CD,EAAOC,QAAU,IAA0B,kC,qMCqBrCC,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,MAAO,OACXC,gBAAiB,WAEjBC,MAAO,CACHC,OAAQ,EACRC,WAAY,UAEhBC,OAAQ,CACNJ,gBAAiB,gBAIR,SAASK,IACpB,IAAMC,EAAUX,IAEhB,OACE,kBAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQR,MACvB,kBAACW,EAAA,EAAD,CACEL,OACE,kBAACM,EAAA,EAAD,CAAQC,aAAW,SAASH,UAAWF,EAAQF,QAA/C,KAIFQ,MAAM,GACNC,UAAU,KAEZ,kBAACC,EAAA,EAAD,CAAWN,UAAWF,EAAQL,MAAOW,MAAM,gBAC3C,kBAACG,EAAA,EAAD,MAGA,kBAACC,EAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACC,EAAA,EAAD,CAAYP,aAAW,oBACrB,kBAAC,IAAD,CAAgBQ,MAAO,CAACC,MAAO,cCjB5BC,MA9Bf,WACE,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,YACX,yBAAKc,IAAKC,IAAMf,UAAU,WAAWgB,IAAI,SACzC,+BAGF,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,EACxCT,MAAO,CACLU,QAAS,OACTC,SAAU,SAGX,CAAC,EAAG,EAAG,GAAGC,KAAI,SAACC,GAAD,OACb,kBAACP,EAAA,EAAD,CAAMQ,IAAKD,EAAOE,MAAI,GACpB,kBAAC7B,EAAD,WAMN,uBAAGc,MAAO,CAACgB,UAAY,OAAQC,SAAU,KAAzC,wBCnBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.576a14f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/test.91bef388.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n// import Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport test from '../static/images/cards/test.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '30vh',\r\n    backgroundColor: '#333842'\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    avatar: {\r\n      backgroundColor: '#474e5c',\r\n    },\r\n}));\r\n\r\nexport default function HomeGrid() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Card className={classes.root}>\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n              r\r\n            </Avatar>\r\n          }\r\n          title=\"\"\r\n          subheader=\"\"\r\n        />\r\n        <CardMedia className={classes.media} title=\"Paella dish\" />\r\n        <CardContent>\r\n\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n          <IconButton aria-label=\"add to favorites\">\r\n            <VisibilityIcon style={{color: 'white'}}/>\r\n          </IconButton>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Grid from '@material-ui/core/Grid'\n\nimport HomeGrid from './components/HomeGrid'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"hr-width\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <hr />\n        </p>\n      </header>\n        <Grid container justify=\"center\" spacing={8} \n          style={{\n            display: 'flex', \n            maxWidth: '100%'\n        }}>\n          \n          {[0, 1, 2].map((value) => (\n            <Grid key={value} item>\n              <HomeGrid />\n            </Grid>\n          ))}\n        \n        </Grid>\n\n        <p style={{marginTop : '12vh', fontSize: 12}}>under construction</p>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}